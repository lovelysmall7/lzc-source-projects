package com.lzc.demo.service.index;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.lzc.demo.dao.DivideHistoryInfoDao;
import com.lzc.demo.dao.TaskInfoDao;
import com.lzc.demo.dao.WorkerInfoDao;
import com.lzc.demo.model.DivideHistoryInfo;
import com.lzc.demo.model.MapInfo;
import com.lzc.demo.model.TaskInfo;
import com.lzc.demo.model.WorkerInfo;
import com.lzc.demo.util.CharDataUtil;
import com.lzc.demo.util.ExcelHelper;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

public class SmartCCIndexService {
	/**
	 * 
	 * 单个/批量更改零件任务的状态
	 * @param request
	 * @return
	 */
	public String changeState(HttpServletRequest request){
		DivideHistoryInfoDao dao = new DivideHistoryInfoDao();
		WorkerInfoDao wDao = new WorkerInfoDao();
		TaskInfoDao tDao = new TaskInfoDao();
		String dataJson = request.getParameter("dataJson");
		JSONArray jarray = JSONArray.fromObject(dataJson);
		for(int l = 0;l < jarray.length();l++){
			JSONObject obj = (JSONObject) jarray.get(l);
			String id = obj.getString("id");
	        String taskIds = obj.getString("taskIds");
	        String state = obj.getString("state");
	        String workerId = obj.getString("workerId");
	       
	        //查出该工人信息
	        WorkerInfo workerinfo = wDao.findById(workerId);
	        DivideHistoryInfo d = dao.findById(id);
	        if("1".equals(state)){
	        	 d.setState(2);
	        }
	        else{
	        	//说明是已完成 需要将该工人的当前所在工位信息进行更新
	        	String stationNames = d.getStationNames();//获得这个工人完成这个工作需要经过的工位集合（带有顺序信息）
	        	if(stationNames != null){
	        		String[] stationArray = stationNames.split(",");
	        		if(stationArray.length > 0){
	        			//获得当前工位
	        			String currentStation = stationArray[stationArray.length - 1];
	        			workerinfo.setCurrentStation(currentStation);
	        			wDao.update(workerinfo);//将这个工人的当前工位信息更新
	        		}
	        	}
	        	d.setState(3);
	        }
	        //更新任务分配记录表状态
	        if(dao.update(d)){
	        	//将对应的这些任务表数据状态也更新
	        	String[] taskidArray = taskIds.split(",");
	        	for(int i = 0;i < taskidArray.length;i++){
	        		TaskInfo t = tDao.findById(taskidArray[i]);
	        		t.setState(d.getState());
	        		tDao.update(t);
	        	}
	        }
		}
        
        TaskInfo param = new TaskInfo();
        List<TaskInfo> data = tDao.findAllOnCurrentDay(param);
        List<DivideHistoryInfo> data1 = dao.findAllOnCurrentDay(null);
        Map<String,Object> resultHM = new HashMap<String,Object>();
      //-------------构建图表数据---------------------
		Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
		Object categoriesList = charDataMap.get("categories");
		Object seriesList = charDataMap.get("series");
		
		
		List<WorkerInfo> workerList = wDao.findAll();
		resultHM.put("categories", categoriesList);
		resultHM.put("series", seriesList);
        resultHM.put("code", 0);
        resultHM.put("data", data);
        resultHM.put("data1", data1);
        resultHM.put("data2", workerList);
        Integer sNum = (Integer) charDataMap.get("sNum");
        resultHM.put("sNum", sNum);
        String resultJson = JSONObject.fromObject(resultHM).toString();
        return resultJson;
	}
	/**
	 * 添加临时紧急任务
	 * @param request
	 * @return
	 */
	public String uploadEmergencyTaskExcel(HttpServletRequest request){
		System.out.println("handle a request for post");
        FileItemFactory factory = new DiskFileItemFactory();
        WorkerInfoDao wDao = new WorkerInfoDao();
        TaskInfoDao tDao = new TaskInfoDao();
        ServletFileUpload upload = new ServletFileUpload(factory);
        upload.setHeaderEncoding(request.getCharacterEncoding());
        ExcelHelper helper = new ExcelHelper();
        HashMap<String,Object> result = new HashMap<String,Object>();
        String component = "";
        String station = "";
        try {
            List<FileItem> list = upload.parseRequest(request);
            if(list == null){
            	return null;
            }
            if(list.size() == 0){
            	return null;
            }
            FileItem item = null;
	           for(FileItem it : list){
	        	   if(it != null){
	        		   if(it.getSize() > 0){
	        			   if("emergencyExcelData".equals(it.getFieldName())){
	        				   item = it;
	        			   }
	        			   if("component".equals(it.getFieldName())){
	        				   component = it.getString();
	        			   }
	        			   if(("station").equals(it.getFieldName())){
	        				   station = it.getString();
	        			   }
	        		   }
	        	   }
	           }
	           //插入一条紧急临时任务
                if(!"".equals(component) && component!= null && !"".equals(station) && station != null){
                	TaskInfo t = new TaskInfo();
                	t.setId(UUID.randomUUID().toString());
                	t.setComponentName(component);
                	t.setStationId(station);
                	t.setStationName(station);
                	t.setCreateTime(new Date());
                	t.setState(0);
                	int maxTaskNo = tDao.selectMaxTaskNum();
                	maxTaskNo = maxTaskNo + 1;
                	t.setTaskNo(maxTaskNo + "");
                	t.setOrderNum(maxTaskNo);
                	tDao.insert(t);
                }
                if(item != null){
                	 if (item.getName().endsWith(".xls")||item.getName().endsWith(".xlsx")) {
 	                    // 说明是文件,不过这里最好限制一下
 	                    List<TaskInfo> dataList = helper.analysis(item.getInputStream(),"open");
 	                    result.put("data", dataList);
 	                    wDao.initAllWorkerStation();
 	                    List<WorkerInfo> wList = wDao.findAll();
 	                    result.put("wList", wList);
 	                    
 	                } else {
 	                    // 说明文件格式不符合要求
 	                	
 	                    return "-1";
 	                }
                }
                result.put("code", "0");
                Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
                Object categoriesList = charDataMap.get("categories");
        		Object seriesList = charDataMap.get("series");
        		Integer sNum = (Integer) charDataMap.get("sNum");
        		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
        		List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(null);
        		result.put("sNum", sNum);
        		result.put("dList", dList);
        		result.put("categories", categoriesList);
        		result.put("series", seriesList);
        		String resultJson = JSONObject.fromObject(result).toString();
        		return resultJson;
			}catch(Exception e){
				return "-2";
			}
	}
	/**
	 * 上传当日任务
	 * @param request
	 * @return
	 */
	public String uploadTaskExcel(HttpServletRequest request){
		FileItemFactory factory = new DiskFileItemFactory();
        ServletFileUpload upload = new ServletFileUpload(factory);
        upload.setHeaderEncoding(request.getCharacterEncoding());
        ExcelHelper helper = new ExcelHelper();
        HashMap<String,Object> result = new HashMap<String,Object>();
        try {
            List<FileItem> list = upload.parseRequest(request);
            if(list == null){
            	return null;
            }
            if(list.size() == 0 ){
            	return null;
            }
            FileItem item = null;
	           for(FileItem it : list){
	        	   if(it != null){
	        		   if(it.getSize() > 0){
	        			   if("excelData".equals(it.getFieldName())){
	        				   item = it;
	        			   }
	        			  
	        		   }
	        	   }
	           }
                
                if(item == null){
                	return null;
                }
                if (item.getName().endsWith(".xls")||item.getName().endsWith(".xlsx")) {
                    // 说明是文件,不过这里最好限制一下
                    List<TaskInfo> dataList = helper.analysis(item.getInputStream(),"close");
                    result.put("code", "0");
                    result.put("data", dataList);
                    WorkerInfoDao wDao = new WorkerInfoDao();
                    wDao.initAllWorkerStation();
                    List<WorkerInfo> wList = wDao.findAll();
                    Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
                    Object categoriesList = charDataMap.get("categories");
            		Object seriesList = charDataMap.get("series");
            		Integer sNum = (Integer) charDataMap.get("sNum");
            		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
            		List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(null);
            		result.put("sNum", sNum);
            		result.put("dList", dList);
            		result.put("categories", categoriesList);
            		result.put("series", seriesList);
                    result.put("wList", wList);
                    List<HashMap<String,Object>> pList = selectCurrentTaskStation();
                    result.put("pList", pList);
                    ArrayList<ArrayList<Integer>> mapData = buildMapData();
                    result.put("mapData", mapData);
                } else {
                    
                    return "-1";
                }
            String resultJson = JSONObject.fromObject(result).toString();
            return resultJson;
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return "-2";
        }
	}
	/**
	 * 查询当天任务涉及的所有工位的无重复集合
	 * @return
	 */
	public List<HashMap<String,Object>> selectCurrentTaskStation(){
		TaskInfoDao dao = new TaskInfoDao();
		List<HashMap<String,Object>> cStationList = dao.selectTaskStation();
		List<HashMap<String,Object>> rList = new ArrayList<HashMap<String,Object>>();
		if(cStationList != null){
			Iterator<HashMap<String,Object>> it = cStationList.iterator();
			while(it.hasNext()){
				HashMap<String,Object> hm = it.next();
				String x = (String) hm.get("x");
				String y = (String) hm.get("y");
				String[] aaa = x.split("[.]");
				if(aaa.length > 0){
					x = aaa[0];
				}
				String[] bbb = y.split("[.]");
				if(bbb.length > 0){
					y = bbb[0];
				}
				hm.put("x", Integer.parseInt(x) - 1);
				hm.put("y", Integer.parseInt(y) - 1);
				rList.add(hm);
			}
		}
		return rList;
	}
	
	public ArrayList<ArrayList<Integer>> buildMapData(){
		ArrayList<ArrayList<HashMap<String,Object>>> mapinfo = MapInfo.getInstanse().getMapInfo();
		//构建地图信息=--------------------
		ArrayList<ArrayList<Integer>> mapData = new ArrayList<ArrayList<Integer>>();
		for(int i = 0 ;i < mapinfo.size();i++){
			ArrayList<HashMap<String,Object>> row = mapinfo.get(i);
			ArrayList<Integer> rowData = new ArrayList<Integer>();
			for(int j = 0 ; j < row.size() ;j++){
				HashMap<String,Object> colInfo = row.get(j);
				String colType = (String)colInfo.get("colType");
				//0路径1障碍
				if("0".equals(colType)){
					rowData.add(1);
				}
				else{
					rowData.add(0);
				}
			}
			mapData.add(rowData);
		}
		return mapData;
	}
	/**
	 * 初始化加载数据
	 * @param request
	 * @return
	 */
	public String loadData(HttpServletRequest request){
		TaskInfoDao tDao = new TaskInfoDao();
		List<TaskInfo> tList = tDao.findAllOnCurrentDay(null);
		Map<String,Object> resultMap = new HashMap<String,Object>();
		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
		List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(null);
		Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
		Object categoriesList = charDataMap.get("categories");
		Object seriesList = charDataMap.get("series");
		List<Map<String,Object>> listA = CharDataUtil.getPointsData();
		if(listA.size() > 0){
			Map<String,Integer> coorDinateDate =CharDataUtil.adjustCoordinate(listA);
			List<String> legendData = CharDataUtil.getlegendData(listA);
			ArrayList<Map<String,Object>> eCharCategoriesList = CharDataUtil.getCategoriesList(legendData);
			
			Map<String,Object> personLMap = CharDataUtil.buildParamForPython();
			String paramJson = JSONObject.fromObject(personLMap).toString();
			//paramJson = paramJson.replace('"', '#');
			//20171225 优化，先从session获取findPathJson 若不存在  再重新通过python计算
			String findPathJson = (String) request.getSession().getAttribute("findPathJson");
			/*if(findPathJson == null || "findPathJson".equals(findPathJson)){
				findPathJson = new PythonUtil().findPathProcessByPython(paramJson);
				 request.getSession().setAttribute("findPathJson", findPathJson);
			}*/
			if(findPathJson != null){
				//生成各个点之间的连线
				ArrayList<ArrayList<Object>> finalLineList = CharDataUtil.buildLineList(findPathJson, personLMap, listA);
				System.out.println("buildLineOver");
				ArrayList<Object> finalLine = finalLineList.get(finalLineList.size() - 1);// 获得最后一组连线
				System.out.println("find final line over");
				request.getSession().setAttribute("finalLine", finalLine);
				ArrayList<Object> arrowList = CharDataUtil.getArrowList(finalLine,listA,null);//获得箭头指向关系
				System.out.println("build arrowList over");
				//构建echarts（工位点） 的图表
				resultMap.put("range", coorDinateDate);
				resultMap.put("points", listA);
				resultMap.put("legendData", legendData);
				resultMap.put("eCharCategoriesList", eCharCategoriesList);
				resultMap.put("lineData",finalLineList);
				resultMap.put("arrowList",arrowList);
				//构建echarts图表结束
			}
		
			
		}
		
		resultMap.put("categories", categoriesList);
		resultMap.put("series", seriesList);
		resultMap.put("code", 0);
		resultMap.put("tList", tList);
		resultMap.put("dList", dList);
		Integer sNum = (Integer) charDataMap.get("sNum");
		resultMap.put("sNum", sNum);
		String resultJson = JSONObject.fromObject(resultMap).toString();
		return resultJson;
	}
}
