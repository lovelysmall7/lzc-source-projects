package com.lzc.demo.service.index;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.lzc.demo.dao.DivideHistoryInfoDao;
import com.lzc.demo.dao.StationInfoDao;
import com.lzc.demo.dao.TaskInfoDao;
import com.lzc.demo.dao.TaskWalkLengthDao;
import com.lzc.demo.dao.WorkerInfoDao;
import com.lzc.demo.model.DivideHistoryInfo;
import com.lzc.demo.model.MapInfo;
import com.lzc.demo.model.StationInfo;
import com.lzc.demo.model.TaskInfo;
import com.lzc.demo.model.TaskWalkLength;
import com.lzc.demo.model.WorkerInfo;
import com.lzc.demo.util.CalculationUtil;
import com.lzc.demo.util.CharDataUtil;
import com.lzc.demo.util.ExcelHelper;
import com.lzc.demo.util.PythonUtil;
import com.lzc.demo.util.SysStringUtil;
import com.lzc.demo.util.Astar.AStar;
import com.lzc.demo.util.Astar.AStarMapInfo;
import com.lzc.demo.util.Astar.Node;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

public class SmartCCIndexService {
	/**
	 * 
	 * 单个/批量更改零件任务的状态
	 * @param request
	 * @return
	 */
	public String changeState(HttpServletRequest request){
		DivideHistoryInfoDao dao = new DivideHistoryInfoDao();
		WorkerInfoDao wDao = new WorkerInfoDao();
		TaskInfoDao tDao = new TaskInfoDao();
		String dataJson = request.getParameter("dataJson");
		JSONArray jarray = JSONArray.fromObject(dataJson);
		for(int l = 0;l < jarray.length();l++){
			JSONObject obj = (JSONObject) jarray.get(l);
			String id = obj.getString("id");
	        String taskIds = obj.getString("taskIds");
	        String state = obj.getString("state");
	        String workerId = obj.getString("workerId");
	       
	        //查出该工人信息
	        WorkerInfo workerinfo = wDao.findById(workerId);
	        DivideHistoryInfo d = dao.findById(id);
	        if("1".equals(state)){
	        	 d.setState(2);
	        }
	        else{
	        	//说明是已完成 需要将该工人的当前所在工位信息进行更新
	        	String stationNames = d.getStationNames();//获得这个工人完成这个工作需要经过的工位集合（带有顺序信息）
	        	if(stationNames != null){
	        		String[] stationArray = stationNames.split(",");
	        		if(stationArray.length > 0){
	        			//获得当前工位
	        			String currentStation = stationArray[stationArray.length - 1];
	        			workerinfo.setCurrentStation(currentStation);
	        			wDao.update(workerinfo);//将这个工人的当前工位信息更新
	        		}
	        	}
	        	d.setState(3);
	        }
	        //更新任务分配记录表状态
	        if(dao.update(d)){
	        	//将对应的这些任务表数据状态也更新
	        	String[] taskidArray = taskIds.split(",");
	        	for(int i = 0;i < taskidArray.length;i++){
	        		TaskInfo t = tDao.findById(taskidArray[i]);
	        		t.setState(d.getState());
	        		tDao.update(t);
	        	}
	        }
		}
        
        TaskInfo param = new TaskInfo();
        List<TaskInfo> data = tDao.findAllOnCurrentDay(param);
        List<DivideHistoryInfo> data1 = dao.findAllOnCurrentDay(null);
        Map<String,Object> resultHM = new HashMap<String,Object>();
      //-------------构建图表数据---------------------
		Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
		Object categoriesList = charDataMap.get("categories");
		Object seriesList = charDataMap.get("series");
		
		
		List<WorkerInfo> workerList = wDao.findAll();
		resultHM.put("categories", categoriesList);
		resultHM.put("series", seriesList);
        resultHM.put("code", 0);
        resultHM.put("data", data);
        resultHM.put("data1", data1);
        resultHM.put("data2", workerList);
        Integer sNum = (Integer) charDataMap.get("sNum");
        resultHM.put("sNum", sNum);
        String resultJson = JSONObject.fromObject(resultHM).toString();
        return resultJson;
	}
	/**
	 * 添加临时紧急任务
	 * @param request
	 * @return
	 */
	public String uploadEmergencyTaskExcel(HttpServletRequest request){
		System.out.println("handle a request for post");
        FileItemFactory factory = new DiskFileItemFactory();
        WorkerInfoDao wDao = new WorkerInfoDao();
        TaskInfoDao tDao = new TaskInfoDao();
        ServletFileUpload upload = new ServletFileUpload(factory);
        upload.setHeaderEncoding(request.getCharacterEncoding());
        ExcelHelper helper = new ExcelHelper();
        HashMap<String,Object> result = new HashMap<String,Object>();
        String component = "";
        String station = "";
        try {
            List<FileItem> list = upload.parseRequest(request);
            if(list == null){
            	return null;
            }
            if(list.size() == 0){
            	return null;
            }
            FileItem item = null;
	           for(FileItem it : list){
	        	   if(it != null){
	        		   if(it.getSize() > 0){
	        			   if("emergencyExcelData".equals(it.getFieldName())){
	        				   item = it;
	        			   }
	        			   if("component".equals(it.getFieldName())){
	        				   component = it.getString();
	        			   }
	        			   if(("station").equals(it.getFieldName())){
	        				   station = it.getString();
	        			   }
	        		   }
	        	   }
	           }
	           //插入一条紧急临时任务
                if(!"".equals(component) && component!= null && !"".equals(station) && station != null){
                	TaskInfo t = new TaskInfo();
                	t.setId(UUID.randomUUID().toString());
                	t.setComponentName(component);
                	t.setStationId(station);
                	t.setStationName(station);
                	t.setCreateTime(new Date());
                	t.setState(0);
                	int maxTaskNo = tDao.selectMaxTaskNum();
                	maxTaskNo = maxTaskNo + 1;
                	t.setTaskNo(maxTaskNo + "");
                	t.setOrderNum(maxTaskNo);
                	tDao.insert(t);
                }
                if(item != null){
                	 if (item.getName().endsWith(".xls")||item.getName().endsWith(".xlsx")) {
 	                    // 说明是文件,不过这里最好限制一下
 	                    List<TaskInfo> dataList = helper.analysis(item.getInputStream(),"open");
 	                    result.put("data", dataList);
 	                    wDao.initAllWorkerStation();
 	                    List<WorkerInfo> wList = wDao.findAll();
 	                    result.put("wList", wList);
 	                    
 	                } else {
 	                    // 说明文件格式不符合要求
 	                	
 	                    return "-1";
 	                }
                }
                result.put("code", "0");
                Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
                Object categoriesList = charDataMap.get("categories");
        		Object seriesList = charDataMap.get("series");
        		Integer sNum = (Integer) charDataMap.get("sNum");
        		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
        		List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(null);
        		result.put("sNum", sNum);
        		result.put("dList", dList);
        		result.put("categories", categoriesList);
        		result.put("series", seriesList);
        		String resultJson = JSONObject.fromObject(result).toString();
        		return resultJson;
			}catch(Exception e){
				return "-2";
			}
	}
	/**
	 * 上传当日任务
	 * @param request
	 * @return
	 */
	public String uploadTaskExcel(HttpServletRequest request){
		FileItemFactory factory = new DiskFileItemFactory();
        ServletFileUpload upload = new ServletFileUpload(factory);
        upload.setHeaderEncoding(request.getCharacterEncoding());
        ExcelHelper helper = new ExcelHelper();
        HashMap<String,Object> result = new HashMap<String,Object>();
        try {
            List<FileItem> list = upload.parseRequest(request);
            if(list == null){
            	return null;
            }
            if(list.size() == 0 ){
            	return null;
            }
            FileItem item = null;
	           for(FileItem it : list){
	        	   if(it != null){
	        		   if(it.getSize() > 0){
	        			   if("excelData".equals(it.getFieldName())){
	        				   item = it;
	        			   }
	        			  
	        		   }
	        	   }
	           }
                
                if(item == null){
                	return null;
                }
                if (item.getName().endsWith(".xls")||item.getName().endsWith(".xlsx")) {
                    // 说明是文件,不过这里最好限制一下
                    List<TaskInfo> dataList = helper.analysis(item.getInputStream(),"close");
                    result.put("code", "0");
                    result.put("data", dataList);
                    WorkerInfoDao wDao = new WorkerInfoDao();
                    wDao.initAllWorkerStation();
                    List<WorkerInfo> wList = wDao.findAll();
                    Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
                    Object categoriesList = charDataMap.get("categories");
            		Object seriesList = charDataMap.get("series");
            		Integer sNum = (Integer) charDataMap.get("sNum");
            		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
            		List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(null);
            		result.put("sNum", sNum);
            		result.put("dList", dList);
            		result.put("categories", categoriesList);
            		result.put("series", seriesList);
                    result.put("wList", wList);
                    List<HashMap<String,Object>> pList = selectCurrentTaskStation();
                    result.put("pList", pList);
                    ArrayList<ArrayList<Integer>> mapData = buildMapData();
                    result.put("mapData", mapData);
                } else {
                    
                    return "-1";
                }
            String resultJson = JSONObject.fromObject(result).toString();
            return resultJson;
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return "-2";
        }
	}
	/**
	 * 查询当天任务涉及的所有工位的无重复集合
	 * @return
	 */
	public List<HashMap<String,Object>> selectCurrentTaskStation(){
		TaskInfoDao dao = new TaskInfoDao();
		List<HashMap<String,Object>> cStationList = dao.selectTaskStation();
		List<HashMap<String,Object>> rList = new ArrayList<HashMap<String,Object>>();
		if(cStationList != null){
			Iterator<HashMap<String,Object>> it = cStationList.iterator();
			while(it.hasNext()){
				HashMap<String,Object> hm = it.next();
				String x = (String) hm.get("x");
				String y = (String) hm.get("y");
				String[] aaa = x.split("[.]");
				if(aaa.length > 0){
					x = aaa[0];
				}
				String[] bbb = y.split("[.]");
				if(bbb.length > 0){
					y = bbb[0];
				}
				hm.put("x", Integer.parseInt(x) - 1);
				hm.put("y", Integer.parseInt(y) - 1);
				rList.add(hm);
			}
		}
		return rList;
	}
	
	public ArrayList<ArrayList<Integer>> buildMapData(){
		ArrayList<ArrayList<HashMap<String,Object>>> mapinfo = MapInfo.getInstanse().getMapInfo();
		//构建地图信息=--------------------
		ArrayList<ArrayList<Integer>> mapData = new ArrayList<ArrayList<Integer>>();
		for(int i = 0 ;i < mapinfo.size();i++){
			ArrayList<HashMap<String,Object>> row = mapinfo.get(i);
			ArrayList<Integer> rowData = new ArrayList<Integer>();
			for(int j = 0 ; j < row.size() ;j++){
				HashMap<String,Object> colInfo = row.get(j);
				String colType = (String)colInfo.get("colType");
				//0路径1障碍
				if("0".equals(colType)){
					rowData.add(1);
				}
				else{
					rowData.add(0);
				}
			}
			mapData.add(rowData);
		}
		return mapData;
	}
	/**
	 * 初始化加载数据
	 * @param request
	 * @return
	 */
	public String loadData(HttpServletRequest request){
		TaskInfoDao tDao = new TaskInfoDao();
		List<TaskInfo> tList = tDao.findAllOnCurrentDay(null);
		Map<String,Object> resultMap = new HashMap<String,Object>();
		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
		List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(null);
		Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
		Object categoriesList = charDataMap.get("categories");
		Object seriesList = charDataMap.get("series");
		List<Map<String,Object>> listA = CharDataUtil.getPointsData();
		if(listA.size() > 0){
			Map<String,Integer> coorDinateDate =CharDataUtil.adjustCoordinate(listA);
			List<String> legendData = CharDataUtil.getlegendData(listA);
			ArrayList<Map<String,Object>> eCharCategoriesList = CharDataUtil.getCategoriesList(legendData);
			
			Map<String,Object> personLMap = CharDataUtil.buildParamForPython();
			String paramJson = JSONObject.fromObject(personLMap).toString();
			//paramJson = paramJson.replace('"', '#');
			//20171225 优化，先从session获取findPathJson 若不存在  再重新通过python计算
			String findPathJson = (String) request.getSession().getAttribute("findPathJson");
			/*if(findPathJson == null || "findPathJson".equals(findPathJson)){
				findPathJson = new PythonUtil().findPathProcessByPython(paramJson);
				 request.getSession().setAttribute("findPathJson", findPathJson);
			}*/
			if(findPathJson != null){
				//生成各个点之间的连线
				ArrayList<ArrayList<Object>> finalLineList = CharDataUtil.buildLineList(findPathJson, personLMap, listA);
				System.out.println("buildLineOver");
				ArrayList<Object> finalLine = finalLineList.get(finalLineList.size() - 1);// 获得最后一组连线
				System.out.println("find final line over");
				request.getSession().setAttribute("finalLine", finalLine);
				ArrayList<Object> arrowList = CharDataUtil.getArrowList(finalLine,listA,null);//获得箭头指向关系
				System.out.println("build arrowList over");
				//构建echarts（工位点） 的图表
				resultMap.put("range", coorDinateDate);
				resultMap.put("points", listA);
				resultMap.put("legendData", legendData);
				resultMap.put("eCharCategoriesList", eCharCategoriesList);
				resultMap.put("lineData",finalLineList);
				resultMap.put("arrowList",arrowList);
				//构建echarts图表结束
			}
		
			
		}
		
		resultMap.put("categories", categoriesList);
		resultMap.put("series", seriesList);
		resultMap.put("code", 0);
		resultMap.put("tList", tList);
		resultMap.put("dList", dList);
		Integer sNum = (Integer) charDataMap.get("sNum");
		resultMap.put("sNum", sNum);
		String resultJson = JSONObject.fromObject(resultMap).toString();
		return resultJson;
	}
	public HashMap<String,Object> submitScheme_003(String workersJson){
		//**********************分配任务之前的准备工作********************************
		HashMap<String,Object> resultHM = new HashMap<String,Object>();
		TaskInfoDao taskInfoDao = new TaskInfoDao();
		TaskWalkLengthDao twDao = new TaskWalkLengthDao();
		DivideHistoryInfoDao dDao = new DivideHistoryInfoDao();
		
		//若已经分配过 需要删除当天数据重新分配
		//DivideHistoryInfo dParam = new DivideHistoryInfo();
		//20180418修改 只删除未完成的分配记录 已完成的要排除
		//List<DivideHistoryInfo> dList = dDao.findAllOnCurrentDay(dParam);
		List<DivideHistoryInfo> ddList = dDao.findUnfinishOnCurrentDay();
		if(ddList.size() > 0){
			dDao.deleteCurrentData();
			twDao.deleteCurrentData();
			TaskInfo tParam1 = new TaskInfo();
			tParam1.setState(1);
			//将之前更新为已分配状态的任务 复原回未分配
			//20180418修改 只回复未完成的任务 已完成的要排除
			//List<TaskInfo> tList_1 = taskInfoDao.findAllOnCurrentDay(tParam1);
			List<TaskInfo> tList_1 = taskInfoDao.findCurrentNotFinishList();
			if(tList_1 != null){
				for(int i = 0;i < tList_1.size();i++){
					TaskInfo t = tList_1.get(i);
					t.setState(0);
					taskInfoDao.update(t);
				}
			}
		}
			
		
		//为A* 算法提供地图数据
		ArrayList<ArrayList<Integer>> mapData = buildMapData();
		AStarMapInfo mapInfo = new AStarMapInfo();
		mapInfo.buildMap(mapData);
		//地图数据构建结束
		//test Code
		/*Node sNode = new Node(117,204);
		Node eNode = new Node(244,242);
		mapInfo.setInfo(sNode, eNode);
		  //用两个相邻工位去调用A* 算法 计算距离
		AStar aStar = new AStar();
		aStar.start(mapInfo);
		System.out.println(eNode.G);*/
		
		List<String> list = taskInfoDao.getTaskComponentList();
		Map<String,List<String>> paramList = new HashMap<String,List<String>>();
		DivideHistoryInfoDao divideHistoryInfoDao = new DivideHistoryInfoDao();
		
		JSONArray parray = JSONArray.fromObject(workersJson);
		String pNum = parray.length() + "";
		//只存放零件名称的集合 方便后面取值
		List<String> componentList = new ArrayList<String>();
		DivideHistoryInfo f = new DivideHistoryInfo();
		if(list != null){
			for(int i = 0;i < list.size();i++){
				String componentName = list.get(i);
				List<String> stationList = taskInfoDao.getStationByComponent(componentName);
				//map 结构： C01:工位1、工位2、工位3...
				paramList.put(list.get(i), stationList);
				componentList.add(componentName);
			}
		}
		ArrayList<ArrayList<HashMap<String,Object>>> resultList = divisionCoreAlgor(paramList,parray.length(),mapInfo);
		for(int i = 0;i < parray.length();i++){
			TaskWalkLength tw = new TaskWalkLength();
			JSONObject pobj = (JSONObject) parray.get(i);//parray :前端传来的工人集合
			String workerId = pobj.getString("id");
			//获取每一个人员的分配结果 （一个集合 包含零件、距离、工位等信息）
			ArrayList<HashMap<String,Object>> oneWorkerResult = resultList.get(i);
			HashMap<String,Object> pHM = oneWorkerResult.get(oneWorkerResult.size() - 1);//最后一个零件任务的距离就是该工人的总距离
			Integer distanse = (Integer) pHM.get("distanse");
			tw.setId(UUID.randomUUID().toString());
			tw.setCreateTime(new Date());
			tw.setDistanse(Double.valueOf(distanse).intValue());
			tw.setWorkerId(workerId);
			tw.setState(0);
			//插入一条每个人的路程记录
			twDao.insert(tw);
			
			for(int l = 0;l < oneWorkerResult.size();l++){
				HashMap<String,Object> pHM1 = oneWorkerResult.get(l);
				String componentName = (String) pHM1.get("componentName");
				CalculationUtil.divitionComponentToPerson(componentName, workerId, l+1);
			}
			
		}
		TaskInfo t1 = new TaskInfo();
		List<TaskInfo> tList = taskInfoDao.findAllOnCurrentDay(t1);
		resultHM.put("code", 0); 
		resultHM.put("data", tList); 
		List<DivideHistoryInfo> dList = divideHistoryInfoDao.findAllOnCurrentDay(f);
	
		resultHM.put("data1", dList); 
		//-------------构建图表数据---------------------
		Map<String,Object> charDataMap = CharDataUtil.newBuildCharData();
		Object categoriesList = charDataMap.get("categories");
		Object seriesList = charDataMap.get("series");
		resultHM.put("categories", categoriesList);
		resultHM.put("series", seriesList);
		Integer sNum = (Integer) charDataMap.get("sNum");
		resultHM.put("sNum", sNum);
		return resultHM;
	}
	/**
	 * 分配任务的核心算法 
	 * @param paramList
	 * @param pNum
	 * @param mapInfo
	 * @return
	 */
	public ArrayList<ArrayList<HashMap<String,Object>>> divisionCoreAlgor(Map<String,List<String>> paramList,Integer pNum,AStarMapInfo mapInfo){
		AStar aStar = new AStar();
		StationInfoDao sDao = new StationInfoDao();
		String resultJson = "";
		//创建一个用来存放待分配零件集合的队列
		ArrayList<HashMap<String,Object>> queue = new ArrayList<HashMap<String,Object>>();
		for (Map.Entry<String,List<String>> entry : paramList.entrySet()) { 
		 // System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue()); 
		  String componentName = entry.getKey();//零件名称
		  List<String> stations = entry.getValue();//该了零件对应的所有工位
		  HashMap<String,Object> aMap = new HashMap<String,Object>();
		  int distanse = 0;
		  //对每个零件下的工位进行遍历
		  for(int l=0;l < stations.size();l++){
			  String stationId = stations.get(l);
			  StationInfo s = sDao.findById(stationId);
			  if(s == null){
				  System.out.println("!!the station info  is not in database : " + stationId);
				  return null;
			  }
			  String x = SysStringUtil.formatIntegerStr(s.getxAxis());
			  String y = SysStringUtil.formatIntegerStr(s.getyAxis());
			  Integer sx = Integer.parseInt(x) - 1;
			  Integer sy = Integer.parseInt(y) - 1;
			  if(l + 1 < stations.size()){
				  String eStationId = stations.get(l + 1);
				  StationInfo estation = sDao.findById(eStationId);
				  if(estation == null){
					  System.out.println("!!the station info is not in database : " + eStationId);
					  return null;
				  }
				  Integer ex = Integer.parseInt(SysStringUtil.formatIntegerStr(estation.getxAxis())) - 1;
				  Integer ey = Integer.parseInt(SysStringUtil.formatIntegerStr(estation.getyAxis())) - 1;
				  
				  Node sNode = new Node(sx,sy);
				  Node eNode = new Node(ex,ey);
				  mapInfo.setInfo(sNode, eNode);
				  //用两个相邻工位去调用A* 算法 计算距离
				  aStar.start(mapInfo);
				  distanse += eNode.G;
			  }
		  }
		  aMap.put("componentName", componentName);
		  aMap.put("distanse", distanse);
		  aMap.put("stations", stations);
		  queue.add(aMap);
		}
		System.out.println("当前队列待分配零件数量 ： " + queue.size());
		//以上代码计算了每个零件对应的工位的距离总代价
		/**
		 * queue结构
		 * c1 200 s1,s2,s3
		 * c2 240 s4,s5,s6
		 * ...
		 */
		
		
		/**
		 * 第一次分配：随机分配 从queue中弹出n个零件分配给n个人 
		 */
		//分配结果的list 有几个人就有几个元素  里面每个list里存放的每个人分到的零件
		ArrayList<ArrayList<HashMap<String,Object>>> resultList =  new ArrayList<ArrayList<HashMap<String,Object>>>();
		Integer indexFlag = -1;//记录下一次应该给第几个谁分配
		Integer minDistanse = -1;
		for(int i = 0;i < pNum;i++){//有几个人就循环几次
			ArrayList<HashMap<String,Object>> cList = new ArrayList<HashMap<String,Object>>();
			Iterator<HashMap<String,Object>> it = queue.iterator();
			if(it.hasNext()){
				HashMap<String,Object> hm = it.next();
				it.remove();//将这个元素从集合中删除
				cList.add(hm);//把一个零件分配给一个人 并从队列中删除
				Integer distanse = (Integer) hm.get("distanse");
				if(i == 0){
					minDistanse = distanse;
					indexFlag = 0;
				}
				else{
					if(distanse < minDistanse){
						minDistanse = distanse;
						indexFlag = i;//当前谁的距离最小下一次就应该分配给谁
					}
				}
				resultList.add(cList);
			}
			
			
		}
		System.out.println("第一次随机分配完毕。");
		/**
		 * 继续分配队列中剩余的零件
		 */
		while(queue.size() > 0){
			System.out.println("队列中剩余： " + queue.size() + "个元素。");
			//循环第一次：上面代码记录的indexFlag的位置，这次直接取出list中的对应人分配结果
			ArrayList<HashMap<String,Object>> cList = resultList.get(indexFlag);
			//拿到当前的这个人分配的最新的一个零件
			HashMap<String,Object> hm = cList.get(cList.size() - 1);
			//拿到当前零件对应的所有工位集合
			List<String> stations = (List<String>) hm.get("stations");
			//从工位集合中取出最后一个工位
			String startStationId = stations.get(stations.size() - 1);
			//通过dao查出该工位坐标信息
			StationInfo sStationInfo = sDao.findById(startStationId);
			System.out.println(" 起始点id：" + startStationId);
			Node sNode = new Node(Integer.parseInt(sStationInfo.getxAxis()) - 1,Integer.parseInt(sStationInfo.getyAxis()) - 1);
			//当前人员要走的总距离
			Integer distanse = (Integer) hm.get("distanse");
			Integer minDistanse_1 = 0;
			Integer minDistanse_2 = 0;//20180418后加 只比对起始零件内部距离 + 起止距离  不加 终止零件内部距离 但最终计算总距离需要加上 所以minDistanse_1保留
			Integer minDistanseQueueIndex = 0;//路程最小的点再queue中的位置
			//对剩余零件集合进行遍历 计算每一个零件的点 与当前sStationInfo的距离 取最小的分配给这个人
			for(int i = 0;i < queue.size();i++){
				
				HashMap<String,Object> cInfo = queue.get(i);
				ArrayList<String> eStations = (ArrayList<String>) cInfo.get("stations");
				//得到这个零件的第一个工位id
				String eStationId = eStations.get(0);
				System.out.println(" 终止点id：" + eStationId);
				StationInfo eStationInfo = sDao.findById(eStationId);//通过dao查出该工位坐标信息
				Integer distanse1 = (Integer) cInfo.get("distanse");//零件内部工位总距离
				Node eNode = new Node(Integer.parseInt(SysStringUtil.formatIntegerStr(eStationInfo.getxAxis())) - 1,Integer.parseInt(SysStringUtil.formatIntegerStr(eStationInfo.getyAxis())) - 1);
				mapInfo.setInfo(sNode, eNode);
				aStar.start(mapInfo);
				Integer distanse_1 = eNode.G;//起始位置和终止位置的距离
				if(minDistanse_1 == 0){
					minDistanse_1 = distanse + distanse_1 + distanse1;
					minDistanse_2 = distanse + distanse_1;
				}
				else{
					if(distanse_1 + distanse < minDistanse_2){
						minDistanse_1 = distanse + distanse_1 + distanse1;
						minDistanse_2 = distanse_1 + distanse;
						minDistanseQueueIndex = i;
					}
				}
			}
			Iterator<HashMap<String,Object>> itt = queue.iterator();
			int count = 0;//记录queue 循环次数
			//这次的循环目的就是根据上面的minDistanseQueueIndex 结果 取出queue中的元素分配给这个人 并且从queue中删除
			while(itt.hasNext()){
				HashMap<String,Object> hm_1 = itt.next();
				if(count == minDistanseQueueIndex){
					itt.remove();
					hm_1.put("distanse", distanse + minDistanse_1);
					cList.add(hm_1);
					break;
				}
				count++;
			}
			Integer minDistanse_111 = 0;
			for(int i = 0;i < resultList.size();i++){
				ArrayList<HashMap<String,Object>> cList_1 = resultList.get(i);
				//得到当前人员最近分配的零件信息，里面的distanse 就是当前的总distanse
				HashMap<String,Object> currentHM = cList_1.get(cList_1.size() - 1);
				if(i == 0){
					minDistanse_111 = (Integer) currentHM.get("distanse");
					indexFlag = 0;
				}
				else{
					//再找出最小的距离 更新indexFlag
					if(minDistanse_111 > (Integer) currentHM.get("distanse")){
						minDistanse_111 = (Integer) currentHM.get("distanse");
						indexFlag = i;
					}
				}
			}
			
		}
		
		
		return resultList;
	}
}
